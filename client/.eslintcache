[{"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\index.js":"1","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\App.js":"2","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\PrivateRoute.js":"3","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\context\\AuthContext.js":"4","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\Dashboard.js":"5","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\stock-page\\Stocks.js":"6","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\login-signup\\Login.js":"7","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\landing-page\\LandingPage.js":"8","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\balance-page\\Balance.js":"9","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\order-page\\Order.js":"10","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\login-signup\\Signup.js":"11","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\SearchNav.js":"12","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\Tutorial.js":"13","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\AddWatchlist.js":"14","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\stock-page\\ControlledTabs.js":"15","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\utils\\function.js":"16","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\utils\\Hooks\\UseQuery.js":"17","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\stock-page\\Transaction.js":"18"},{"size":222,"mtime":1678201879860,"results":"19","hashOfConfig":"20"},{"size":2383,"mtime":1678201879848,"results":"21","hashOfConfig":"20"},{"size":465,"mtime":1678201879848,"results":"22","hashOfConfig":"20"},{"size":87,"mtime":1678201879860,"results":"23","hashOfConfig":"20"},{"size":10000,"mtime":1678201879851,"results":"24","hashOfConfig":"20"},{"size":6181,"mtime":1678201879858,"results":"25","hashOfConfig":"20"},{"size":3131,"mtime":1678201879854,"results":"26","hashOfConfig":"20"},{"size":1426,"mtime":1678201879853,"results":"27","hashOfConfig":"20"},{"size":5219,"mtime":1678201879849,"results":"28","hashOfConfig":"20"},{"size":1942,"mtime":1678201879855,"results":"29","hashOfConfig":"20"},{"size":3112,"mtime":1678201879855,"results":"30","hashOfConfig":"20"},{"size":4637,"mtime":1678201879851,"results":"31","hashOfConfig":"20"},{"size":928,"mtime":1678201879852,"results":"32","hashOfConfig":"20"},{"size":3457,"mtime":1678201879850,"results":"33","hashOfConfig":"20"},{"size":869,"mtime":1678201879857,"results":"34","hashOfConfig":"20"},{"size":111,"mtime":1678201879862,"results":"35","hashOfConfig":"20"},{"size":145,"mtime":1678201879861,"results":"36","hashOfConfig":"20"},{"size":6794,"mtime":1678201879859,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rj2nym",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\index.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\App.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\PrivateRoute.js",["84"],"import React, { useContext, useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { AuthContext } from './context/AuthContext';\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return user ? <Component {...props} /> : <Redirect to='/login' />;\r\n      }}\r\n    ></Route>\r\n  );\r\n}\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\Dashboard.js",["85","86"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n  ListGroup,\r\n  Modal,\r\n  Button,\r\n  Card,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Form,\r\n} from 'react-bootstrap';\r\nimport './Dashboard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaPlus, FaEdit, FaMinusCircle } from 'react-icons/fa';\r\nimport { formatNumber } from '../../utils/function';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport SearchNav from './SearchNav';\r\nimport AddWatchlist from './AddWatchlist';\r\nimport Tutorial from './Tutorial';\r\n\r\nconst Dashboard = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [watchlist, setWatchlist] = useState('');\r\n  const [isEditClicked, setIsEditClicked] = useState(false);\r\n  const [currentCashBalance, setCurrentCashBalance] = useState('');\r\n  const [currentHoldings, setCurrentHoldings] = useState('');\r\n  const [currentHoldingValue, setCurrentHoldingValue] = useState([]);\r\n  const [chartData, setChartData] = useState('');\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const userid = user ? user.id : null;\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    setIsEditClicked(false);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (stockid) => {\r\n    const userid = user.id;\r\n    const response = await fetch(`/api/watchlist/${stockid}/${userid}`, {\r\n      method: 'DELETE',\r\n    });\r\n    const data = await response.json();\r\n    setWatchlist(data);\r\n  };\r\n\r\n  const displayWatchlist =\r\n    !isEditClicked && watchlist ? (\r\n      watchlist.map((item, index) => {\r\n        return (\r\n          <ListGroup.Item action key={index}>\r\n            <Link to={`/stock?stock=${item.symbol}`} className='d-flex'>\r\n              <div className='font-weight-bold'>{item.symbol}</div>\r\n            </Link>\r\n          </ListGroup.Item>\r\n        );\r\n      })\r\n    ) : isEditClicked && watchlist ? (\r\n      watchlist.map((item, index) => {\r\n        return (\r\n          <ListGroup.Item action key={index + 50} className='d-flex'>\r\n            <div>\r\n              <Form.Group id='formBasicCheckbox' className='m-0'>\r\n                <Button\r\n                  className='delete-button mb-1'\r\n                  variant='outline-danger'\r\n                  onClick={() => handleDelete(item.id)}\r\n                >\r\n                  <FaMinusCircle />\r\n                </Button>\r\n              </Form.Group>\r\n            </div>\r\n            <div className='font-weight-bold ml-2'>{item.symbol}</div>\r\n          </ListGroup.Item>\r\n        );\r\n      })\r\n    ) : (\r\n      <ListGroup.Item>Create watchlist</ListGroup.Item>\r\n    );\r\n\r\n  const displayCurrentHolding = currentHoldings ? (\r\n    currentHoldings.map((item, index) => {\r\n      return (\r\n        <ListGroup.Item key={index + 300} action>\r\n          <Link\r\n            to={`/stock?stock=${item.symbol}`}\r\n            key={index + 200}\r\n            className='d-flex'\r\n          >\r\n            <div className='stock-left text-left'>\r\n              <div className='font-weight-bold'>{item.symbol}</div>\r\n              <div className='text-muted'>{item.quantity} Shares</div>\r\n            </div>\r\n            <div className='stock-right ml-auto'>\r\n              <div className=''> ${formatNumber(item.holdingValue)} </div>\r\n              <div className='text-right'>${formatNumber(item.gainLoss)} </div>\r\n            </div>\r\n          </Link>\r\n        </ListGroup.Item>\r\n      );\r\n    })\r\n  ) : (\r\n    <ListGroup.Item> No current holdings</ListGroup.Item>\r\n  );\r\n  const getCurrentHoldings = async () => {\r\n    const response = await fetch(`/api/currentHoldings/${userid}`);\r\n    const data = await response.json();\r\n\r\n    setCurrentHoldingValue(data.holdingsValue);\r\n\r\n    if (data.currentHoldings.length > 0) {\r\n      setCurrentHoldings(data.currentHoldings);\r\n    }\r\n  };\r\n\r\n  const getWatchlist = async () => {\r\n    const response = await fetch(`/api/watchlist/${userid}`);\r\n    const data = await response.json();\r\n\r\n    if (data.length > 0) {\r\n      setWatchlist(data);\r\n    }\r\n  };\r\n\r\n  const getCashBalance = async () => {\r\n    try {\r\n      const response = await fetch(`/api/cashBalance/${userid}`);\r\n      const data = await response.json();\r\n\r\n      setCurrentCashBalance(Number(data.amount));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getDoughnutChart = () => {\r\n    if (currentCashBalance && !currentHoldings) {\r\n      setChartData({\r\n        labels: ['cash'],\r\n        datasets: [\r\n          {\r\n            label: '# of Votes',\r\n            data: [currentCashBalance],\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n              'rgba(54, 162, 235, 0.2)',\r\n              'rgba(255, 206, 86, 0.2)',\r\n              'rgba(75, 192, 192, 0.2)',\r\n              'rgba(153, 102, 255, 0.2)',\r\n              'rgba(255, 159, 64, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n              'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (currentCashBalance && currentHoldings) {\r\n      const mappedData = currentHoldings.map((item) => item.holdingValue);\r\n      mappedData.push(currentCashBalance);\r\n\r\n      const mappedLabel = currentHoldings.map((item) => item.symbol);\r\n      mappedLabel.push('cash');\r\n\r\n      setChartData({\r\n        labels: mappedLabel,\r\n        datasets: [\r\n          {\r\n            label: '# of Votes',\r\n            data: mappedData,\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n              'rgba(54, 162, 235, 0.2)',\r\n              'rgba(255, 206, 86, 0.2)',\r\n              'rgba(75, 192, 192, 0.2)',\r\n              'rgba(153, 102, 255, 0.2)',\r\n              'rgba(255, 159, 64, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n              'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    getWatchlist();\r\n    getCashBalance();\r\n    getCurrentHoldings();\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    getDoughnutChart();\r\n  }, [currentCashBalance, currentHoldings]);\r\n\r\n  return (\r\n    <>\r\n      <SearchNav />\r\n      {!currentCashBalance && !currentHoldings && <Tutorial />}\r\n      <div className='main-container d-flex mx-auto mt-3'>\r\n        <div className='left-container mx-2'>\r\n          <Card>\r\n            <Card.Header>Account Summary</Card.Header>\r\n            <Card.Body className='d-flex account-summary border-bottom-0'>\r\n              <Card className='w-50'>\r\n                <Card.Subtitle className='my-2 text-muted'>\r\n                  Current Holding Value\r\n                </Card.Subtitle>\r\n                <Card.Title>\r\n                  ${currentHoldingValue && currentHoldingValue.totalValue}\r\n                </Card.Title>\r\n                <Card.Subtitle className='mb-2 text-muted'>\r\n                  Gain/Loss\r\n                </Card.Subtitle>\r\n                <Card.Title>\r\n                  ${currentHoldingValue && currentHoldingValue.gainLoss}\r\n                </Card.Title>\r\n              </Card>\r\n              <Card className='w-50'>\r\n                <Card.Subtitle className='my-2 text-muted'>\r\n                  Cash and sweep funds\r\n                </Card.Subtitle>\r\n                <Card.Title>\r\n                  ${currentCashBalance ? currentCashBalance : 0}\r\n                </Card.Title>\r\n              </Card>\r\n            </Card.Body>\r\n          </Card>\r\n          <Card>{chartData ? <Doughnut data={chartData} /> : null}</Card>\r\n        </div>\r\n\r\n        <div className='right-container mr-2'>\r\n          <Card>\r\n            <Card.Header className='d-flex'>\r\n              <Card.Title className='text-left mb-0'>\r\n                Current Holding\r\n              </Card.Title>\r\n              <DropdownButton\r\n                id='dropdown-basic-button'\r\n                title=''\r\n                className='ml-auto pt-0'\r\n                variant='outline-dark'\r\n              >\r\n                <Dropdown.Item href='/stock'>Buy</Dropdown.Item>\r\n                <Dropdown.Item href='/stock'>Sell</Dropdown.Item>\r\n              </DropdownButton>\r\n            </Card.Header>\r\n\r\n            <ListGroup variant='flush'>{displayCurrentHolding}</ListGroup>\r\n          </Card>\r\n\r\n          <Card className='mt-2'>\r\n            <Card.Header className='d-flex'>\r\n              <Card.Title className='text-left mb-0'>Watchlists</Card.Title>\r\n              <div className='ml-auto'>\r\n                <Button\r\n                  className='add-button mr-2'\r\n                  variant='outline-dark'\r\n                  onClick={() => handleAdd()}\r\n                >\r\n                  <FaPlus />\r\n                </Button>\r\n                <Button\r\n                  className='add-button edit-button'\r\n                  variant='outline-dark'\r\n                  onClick={() => setIsEditClicked(!isEditClicked)}\r\n                >\r\n                  <FaEdit />\r\n                </Button>\r\n              </div>\r\n\r\n              <Modal show={modalOpen} onHide={closeModal}>\r\n                {modalOpen === true ? (\r\n                  <AddWatchlist\r\n                    closeModal={closeModal}\r\n                    setWatchlist={setWatchlist}\r\n                  />\r\n                ) : null}\r\n              </Modal>\r\n            </Card.Header>\r\n            <ListGroup variant='flush'>{displayWatchlist}</ListGroup>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\stock-page\\Stocks.js",["87","88","89","90"],"import React, { useEffect, useState } from 'react';\r\nimport SearchNav from '../dashboard-page/SearchNav';\r\nimport ControlledTabs from './ControlledTabs';\r\nimport { Chart } from 'react-google-charts';\r\nimport './Stocks.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatNumber } from '../../utils/function';\r\nimport { Card, Alert } from 'react-bootstrap';\r\nimport useQuery from '../../utils/Hooks/UseQuery';\r\n\r\nconst Stocks = () => {\r\n  const [stock, setStock] = useState('');\r\n  const [chart, setChart] = useState([]);\r\n  const [company, setCompany] = useState('');\r\n  const query = useQuery();\r\n  const [selectedStock, setSelectedStock] = useState(query.get('stock'));\r\n  const [orderMsg, setOrderMsg] = useState('');\r\n\r\n  const fetchStock = async () => {\r\n    const stockId = query.get('stock');\r\n    const response = await fetch(`/api/stocks/search/${stockId}`);\r\n    const data = await response.json();\r\n\r\n    setStock(data.quoteData);\r\n    setChart(data.chartData);\r\n    setCompany(data.companyData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchStock();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!selectedStock) return;\r\n    if (selectedStock != query.get('stock')) {\r\n      setSelectedStock(query.get('stock'));\r\n    }\r\n\r\n    fetchStock();\r\n  }, [query.get('stock')]);\r\n\r\n  const displayChart = chart ? (\r\n    <Chart\r\n      width={'600px'}\r\n      height={'400px'}\r\n      chartType='LineChart'\r\n      loader={<div>Loading Chart</div>}\r\n      data={chart}\r\n      options={{\r\n        colors: ['#e0440e'],\r\n        chartArea: {\r\n          left: 50,\r\n          top: 30,\r\n          bottom: 40,\r\n          right: 60,\r\n          width: '80%',\r\n          height: '100%',\r\n        },\r\n        legend: 'none',\r\n        timeline: {\r\n          groupByRowLabel: true,\r\n        },\r\n        hAxis: {\r\n          format: 'M/d/yy',\r\n        },\r\n        vAxis: {\r\n          gridlines: { color: 'none' },\r\n        },\r\n      }}\r\n      rootProps={{ 'data-testid': '1' }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <>\r\n      <SearchNav />\r\n      {orderMsg.successMsg ? (\r\n        <Alert variant='success' className='w-75 mx-auto'>\r\n          {orderMsg.successMsg}{' '}\r\n          <Link to='/order'>Check all your orders here!</Link>\r\n        </Alert>\r\n      ) : orderMsg.errorMsg ? (\r\n        <Alert variant='danger' className='w-75 mx-auto'>\r\n          {orderMsg.errorMsg}{' '}\r\n        </Alert>\r\n      ) : null}\r\n      <div className='stock-main-container d-flex mx-auto mt-3'>\r\n        <div>\r\n          <div className='text-left header-graph-container'>\r\n            {stock ? stock.quote.companyName : null}\r\n          </div>\r\n          <div className='text-left header-graph-container'>\r\n            {stock ? stock.quote.latestPrice : null}\r\n          </div>\r\n          {displayChart}\r\n        </div>\r\n\r\n        <div className='right-container'>\r\n          <Card className=''>\r\n            <ControlledTabs\r\n              currentPrice={stock ? stock.quote.latestPrice : null}\r\n              setOrderMsg={setOrderMsg}\r\n              orderMsg={orderMsg}\r\n            />\r\n          </Card>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='company-info-container mx-auto mt-4'>\r\n        <Card>\r\n          <Card.Header>About</Card.Header>\r\n          <Card.Body>\r\n            <div className='upper-container d-flex mx-auto'>\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>CEO</Card.Title>\r\n                  <Card.Text>{company ? company.CEO : null}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n              <Card style={{ width: '13rem' }} className='info-text'>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Headquarters</Card.Title>\r\n                  <Card.Text>\r\n                    {company\r\n                      ? `${company.city}, ${company.state} ${company.country}`\r\n                      : null}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Industry</Card.Title>\r\n                  <Card.Text>{company ? company.industry : null}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Exchange</Card.Title>\r\n                  <Card.Text>{company ? company.exchange : null}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </div>\r\n\r\n            <div className='lower-container d-flex mx-auto'>\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Market Cap</Card.Title>\r\n                  <Card.Text>\r\n                    {stock ? formatNumber(stock.quote.marketCap) : null}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Price-Earnings Ratio</Card.Title>\r\n                  <Card.Text>{stock ? stock.quote.peRatio : null}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Average Daily Trading Volume</Card.Title>\r\n                  <Card.Text>\r\n                    {stock ? formatNumber(stock.quote.avgTotalVolume) : null}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n              <Card style={{ width: '13rem' }}>\r\n                <Card.Body className='info-text text-left'>\r\n                  <Card.Title>Website</Card.Title>\r\n                  <Card.Text>{company ? company.website : null}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </div>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Stocks;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\login-signup\\Login.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\landing-page\\LandingPage.js",["91","92"],"import React from 'react';\r\nimport { Jumbotron, Nav, Form, Button, Navbar } from 'react-bootstrap';\r\nimport stockimage from '../images/landingpage-image.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaStarAndCrescent } from 'react-icons/fa';\r\n\r\nconst LandingPage = () => {\r\n  return (\r\n    <>\r\n      <Navbar bg='light' variant='light'>\r\n        <Navbar.Brand>\r\n          <Link to='/'>\r\n            {' '}\r\n            Galaxy Trading <FaStarAndCrescent />\r\n          </Link>\r\n        </Navbar.Brand>\r\n        <Form inline className='ml-auto'>\r\n          <Button variant='outline-primary' href='/login' className='mr-2'>\r\n            Log In\r\n          </Button>\r\n          <Button variant='primary' href='/signup'>\r\n            Sign up\r\n          </Button>\r\n        </Form>\r\n      </Navbar>\r\n\r\n      <Jumbotron>\r\n        <div className='w-75 mx-auto d-flex'>\r\n          <div className='text-left mr-5'>\r\n            <h1>Investing for Everyone</h1>\r\n            <p className='my-4'>\r\n              Tools that move your money to the moon and back.\r\n            </p>\r\n            <p>\r\n              <Button variant='primary' href='/signup'>\r\n                Sign up\r\n              </Button>\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <img src={stockimage} height={300} alt='stock-image' />\r\n          </div>\r\n        </div>\r\n      </Jumbotron>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\balance-page\\Balance.js",["93","94","95","96","97"],"import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport './Balance.css';\r\nimport { Form, Col, Row, Button, Card } from 'react-bootstrap';\r\nimport SearchNav from '../dashboard-page/SearchNav';\r\n\r\n//import { useAuth } from '../../context/AuthContext';\r\nimport { AuthContext } from '../../context/AuthContext';\r\n\r\nconst Balance = () => {\r\n  const transferRef = useRef();\r\n  const [cashTransferHistory, setCashTransferHistory] = useState('');\r\n  const [currentCashBalance, setCurrentCashBalance] = useState('');\r\n\r\n  //const { user, setUser, isAuth, setIsAuth } = useAuth();\r\n  const { user, setUser, isAuth, setIsAuth } = useContext(AuthContext);\r\n\r\n  const handleTransfer = async (e) => {\r\n    e.preventDefault();\r\n    const amount = transferRef.current.value;\r\n\r\n    try {\r\n      const config = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ amount, user, type: 'transfer-in' }),\r\n      };\r\n\r\n      const response = await fetch('/api/cashTransfer', config);\r\n      const data = await response.json();\r\n\r\n      setCashTransferHistory(data.transaction);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getCashBalance = async () => {\r\n    const userid = user.id;\r\n    const response = await fetch(`/api/cashBalance/${userid}`);\r\n    const data = await response.json();\r\n    setCurrentCashBalance(data.amount);\r\n  };\r\n\r\n  const getCashTransfer = async () => {\r\n    const userid = user.id;\r\n    const response = await fetch(`/api/cashTransfer/${userid}`);\r\n    const data = await response.json();\r\n\r\n    if (data.length > 0) {\r\n      setCashTransferHistory(data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n\r\n    getCashBalance();\r\n    getCashTransfer();\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (!cashTransferHistory) {\r\n      return;\r\n    }\r\n\r\n    getCashBalance();\r\n  }, [cashTransferHistory]);\r\n\r\n  return (\r\n    <>\r\n      <SearchNav />\r\n      <div className='cash-main-container d-flex mx-auto mt-3'>\r\n        <div className='left-container balance-summary mr-3'>\r\n          <h3 className='text-left'>Current Cash Balance</h3>\r\n          <div>\r\n            <hr />{' '}\r\n          </div>\r\n          <p>\r\n            {' '}\r\n            You have ${currentCashBalance ? currentCashBalance : 0} to trade\r\n          </p>\r\n          <h3 className='text-left'>Cash Transfer History</h3>\r\n          <div>\r\n            <hr />{' '}\r\n          </div>\r\n          <div>\r\n            {cashTransferHistory ? (\r\n              cashTransferHistory.map((t) => {\r\n                return (\r\n                  <div className='d-flex'>\r\n                    <div> {t.type}</div>\r\n                    <div className='ml-auto'> {t.amount}</div>\r\n                  </div>\r\n                );\r\n              })\r\n            ) : (\r\n              <div> No cash transfer history </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className='right-container'>\r\n          <Card>\r\n            <Card.Header> Transfer </Card.Header>\r\n            <Form>\r\n              <Form.Group\r\n                as={Row}\r\n                className='row-buy-sell px-3 py-2'\r\n                controlId='formHorizontalAmount'\r\n              >\r\n                <Form.Label column sm={4} className='px-0'>\r\n                  From\r\n                </Form.Label>\r\n\r\n                <Col sm={8} className='pl-3 pr-0'>\r\n                  <Form.Control\r\n                    type='text'\r\n                    placeholder='Bank Account'\r\n                    readOnly\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n\r\n              <Form.Group\r\n                as={Row}\r\n                className='row-buy-sell px-3 py-2'\r\n                controlId='formHorizontalPrice'\r\n              >\r\n                <Form.Label column sm={4} className='px-0'>\r\n                  To\r\n                </Form.Label>\r\n\r\n                <Col sm={8} className='pl-3 pr-0'>\r\n                  <Form.Control\r\n                    type='text'\r\n                    placeholder='Stock Account'\r\n                    readOnly\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group\r\n                as={Row}\r\n                className='row-buy-sell px-3 py-2'\r\n                controlId='formHorizontalPrice'\r\n              >\r\n                <Form.Label column sm={4} className='px-0'>\r\n                  Amount\r\n                </Form.Label>\r\n\r\n                <Col sm={8} className='pl-3 pr-0'>\r\n                  <Form.Control\r\n                    type='number'\r\n                    placeholder='$0.00'\r\n                    className='number-input'\r\n                    ref={transferRef}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n\r\n              <Button\r\n                variant='success'\r\n                type='submit'\r\n                className='my-3'\r\n                onClick={(e) => handleTransfer(e)}\r\n              >\r\n                Confirm Transfer\r\n              </Button>\r\n            </Form>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\order-page\\Order.js",["98"],"import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport SearchNav from '../dashboard-page/SearchNav';\r\nimport { AuthContext } from '../../context/AuthContext';\r\n\r\nconst moment = require('moment');\r\n\r\nconst Order = () => {\r\n  const [orders, setOrders] = useState('');\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const displayFilledOrder = orders ? (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Symbol</th>\r\n          <th>Type</th>\r\n          <th>Quantity</th>\r\n          <th>Price</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {orders.map((item, index) => {\r\n          return (\r\n            <tr key={index + 10000}>\r\n              <td>{moment(item.created_at).format('MMM Do YY')}</td>\r\n              <td>{item.symbol}</td>\r\n              <td>{item.type}</td>\r\n              <td>{item.quantity}</td>\r\n              <td>{item.price}</td>\r\n              <td>{item.value}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  ) : (\r\n    <p> You don't have any filled orders</p>\r\n  );\r\n\r\n  useEffect(() => {\r\n    const userid = user.id;\r\n    const fetchOrders = async () => {\r\n      const response = await fetch(`/api/orders/${userid}`);\r\n      const data = await response.json();\r\n\r\n      if (data.length > 0) {\r\n        setOrders(data);\r\n      }\r\n    };\r\n\r\n    fetchOrders();\r\n  }, [user]);\r\n\r\n  return (\r\n    <>\r\n      <SearchNav />\r\n      <div className='cash-main-container mt-3 mx-3'>\r\n        <h3 className='text-left'>Open Orders</h3>\r\n        <div>\r\n          <hr />{' '}\r\n        </div>\r\n        <p> You don't have any open orders</p>\r\n        <h3 className='text-left'>Filled Orders</h3>\r\n        <div>\r\n          <hr />{' '}\r\n        </div>\r\n\r\n        {displayFilledOrder}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\login-signup\\Signup.js",["99"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { Form, Button, Navbar, Card } from 'react-bootstrap';\r\nimport './Login-Signup.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaStarAndCrescent } from 'react-icons/fa';\r\n\r\nconst Signup = () => {\r\n  const usernameRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const data = {\r\n        username: usernameRef.current.value.toLowerCase(),\r\n        password: passwordRef.current.value,\r\n      };\r\n\r\n      const config = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      const response = await fetch('/api/auth/signup', config);\r\n      const signupData = await response.json();\r\n\r\n      !response.ok ? setErrorMsg(signupData) : history.push('/login');\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorMsg) {\r\n      setErrorMsg('');\r\n    }\r\n  }, [username]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='light' variant='light'>\r\n        <Navbar.Brand>\r\n          <Link to='/'>\r\n            {' '}\r\n            Galaxy Trading <FaStarAndCrescent />\r\n          </Link>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n\r\n      <Card className='signup-container mx-auto my-4'>\r\n        <Card.Body>\r\n          <h2 className='text-center mb-4'>Sign Up</h2>\r\n\r\n          {errorMsg ? (\r\n            <div className='text-danger'>{errorMsg.errorMessage}</div>\r\n          ) : null}\r\n\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group id='username' className='text-left text-muted'>\r\n              <Form.Label>\r\n                <h5>Username</h5>{' '}\r\n              </Form.Label>\r\n              <Form.Control\r\n                type='username'\r\n                placeholder='Enter Username'\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                ref={usernameRef}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group id='password' className='text-left text-muted'>\r\n              <Form.Label>\r\n                <h5>Password</h5>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Password'\r\n                ref={passwordRef}\r\n                required\r\n              />{' '}\r\n            </Form.Group>\r\n\r\n            <Form.Group id='formGridCheckbox'>\r\n              <Form.Check type='checkbox' label='Agree to our terms' />\r\n            </Form.Group>\r\n\r\n            <Button variant='primary' type='submit'>\r\n              Signup\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <div className='w-100 text-center mt-2'>\r\n        Already have an account? <Link to='/login'>Log In</Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\SearchNav.js",["100"],"import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport {\r\n  ListGroup,\r\n  FormControl,\r\n  Nav,\r\n  Form,\r\n  Button,\r\n  Navbar,\r\n  DropdownButton,\r\n  Dropdown,\r\n} from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './SearchNav.css';\r\nimport { FaStarAndCrescent } from 'react-icons/fa';\r\nimport { AuthContext } from '../../context/AuthContext';\r\n\r\nconst SearchNav = () => {\r\n  const [searchInput, setSearchInput] = useState();\r\n  const [stocks, setStocks] = useState([]);\r\n  const [options, setOptions] = useState();\r\n  const history = useHistory();\r\n  const { user, setIsAuth } = useContext(AuthContext);\r\n\r\n  const inputRef = useRef();\r\n  const ulRef = useRef();\r\n\r\n  const setLoggedOut = async () => {\r\n    try {\r\n      const config = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username: user.name }),\r\n      };\r\n\r\n      const response = await fetch('/api/auth/logout', config);\r\n\r\n      if (response.ok) {\r\n        setIsAuth(false);\r\n        localStorage.removeItem('accessToken');\r\n        history.push('/');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!searchInput) return;\r\n\r\n    if (searchInput.length === 0) {\r\n      setSearchInput('');\r\n      setOptions([]);\r\n    } else {\r\n      const filterSymbol = stocks.stockList\r\n        .filter((s) => s.symbol.includes(searchInput.toUpperCase()))\r\n        .slice(0, 3);\r\n\r\n      const filterName = stocks.stockList\r\n        .filter((s) => s.name.toUpperCase().includes(searchInput.toUpperCase()))\r\n        .slice(0, 3);\r\n\r\n      const mergeArr = [...filterSymbol, ...filterName];\r\n\r\n      setOptions(mergeArr);\r\n    }\r\n  }, [searchInput]);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.addEventListener('click', (e) => {\r\n      if (inputRef) {\r\n        e.stopPropagation();\r\n        ulRef.current.style.display = 'flex';\r\n      }\r\n    });\r\n\r\n    document.addEventListener('click', (e) => {\r\n      if (!ulRef.current) {\r\n        return;\r\n      }\r\n\r\n      if (ulRef) {\r\n        ulRef.current.style.display = 'none';\r\n      }\r\n    });\r\n\r\n    const getStocksList = async () => {\r\n      try {\r\n        const response = await fetch(`/api/stocks/stocksList`);\r\n        const data = await response.json();\r\n\r\n        setStocks(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    getStocksList();\r\n  }, []);\r\n\r\n  const displayOptions = !options\r\n    ? null\r\n    : options.length > 0\r\n    ? options.map((option, index) => {\r\n        return (\r\n          <ListGroup.Item key={index + 100} action>\r\n            <Link to={`/stock?stock=${option.symbol}`}>\r\n              {option.symbol} {option.name}\r\n            </Link>\r\n          </ListGroup.Item>\r\n        );\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <div>\r\n      <Navbar bg='light' variant='light'>\r\n        <Navbar.Brand>\r\n          Galaxy Trading <FaStarAndCrescent />\r\n        </Navbar.Brand>\r\n        <Form inline>\r\n          <FormControl\r\n            type='text'\r\n            placeholder='Search Symbol'\r\n            id='search-bar'\r\n            className='mr-sm-2'\r\n            onChange={(e) => setSearchInput(e.target.value)}\r\n            ref={inputRef}\r\n          />\r\n        </Form>\r\n\r\n        <Nav className='ml-auto'>\r\n          <Button className='navbar-link' variant='outline-secondary'>\r\n            <Link to='/dashboard' className='navbar-link'>\r\n              Portfolio\r\n            </Link>\r\n          </Button>\r\n          <Button className='navbar-link' variant='outline-secondary'>\r\n            <Link to='/balance' className='navbar-link'>\r\n              Balance\r\n            </Link>\r\n          </Button>\r\n          <Button className='navbar-link' variant='outline-secondary'>\r\n            <Link to='/order' className='navbar-link'>\r\n              Order\r\n            </Link>\r\n          </Button>\r\n          <DropdownButton\r\n            title='Account'\r\n            variant='outline-secondary'\r\n            menuAlign='right'\r\n            id='dropdown-menu-align-right'\r\n          >\r\n            <Dropdown.Item href='#/action-1'>Account</Dropdown.Item>\r\n            <Dropdown.Item href='#/action-2'>Help Center</Dropdown.Item>\r\n            <Dropdown.Item as='button' onClick={() => setLoggedOut()}>\r\n              Log Out\r\n            </Dropdown.Item>\r\n          </DropdownButton>\r\n        </Nav>\r\n      </Navbar>\r\n      <ListGroup id='results' className='option-container' ref={ulRef}>\r\n        {displayOptions}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchNav;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\Tutorial.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\dashboard-page\\AddWatchlist.js",["101"],"import React, { useState, useRef, useEffect, useContext } from 'react';\r\nimport { Modal, Form, ListGroup, FormControl } from 'react-bootstrap';\r\nimport { AuthContext } from '../../context/AuthContext';\r\n\r\nconst AddWatchlist = ({ closeModal, setWatchlist }) => {\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [stocks, setStocks] = useState([]);\r\n  const [options, setOptions] = useState([]);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const inputRef = useRef();\r\n  const ulRef = useRef();\r\n\r\n  const handleAdd = async (symbol) => {\r\n    try {\r\n      const data = {\r\n        symbol,\r\n        userid: user.id,\r\n      };\r\n\r\n      const config = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      const response = await fetch('/api/watchlist', config);\r\n      const watchlistData = await response.json();\r\n\r\n      if (!response.ok) {\r\n        setErrorMsg(watchlistData);\r\n        setOptions([]);\r\n      } else {\r\n        closeModal();\r\n        setWatchlist(watchlistData);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setErrorMsg('');\r\n\r\n    if (searchInput.length === 0) {\r\n      setSearchInput('');\r\n      setOptions([]);\r\n    } else {\r\n      const filterSymbol = stocks.stockList\r\n        .filter((s) => s.symbol.includes(searchInput.toUpperCase()))\r\n        .slice(0, 3);\r\n\r\n      const filterName = stocks.stockList\r\n        .filter((s) => s.name.toUpperCase().includes(searchInput.toUpperCase()))\r\n        .slice(0, 3);\r\n\r\n      const mergeArr = [...filterSymbol, ...filterName];\r\n\r\n      setOptions(mergeArr);\r\n    }\r\n  }, [searchInput]);\r\n\r\n  useEffect(() => {\r\n    const getStocksList = async () => {\r\n      try {\r\n        const response = await fetch(`/api/stocks/stocksList`);\r\n\r\n        const data = await response.json();\r\n\r\n        setStocks(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    getStocksList();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Add Stock to watchlist</Modal.Header>\r\n      <Modal.Body>\r\n        <Form inline>\r\n          <FormControl\r\n            type='text'\r\n            placeholder='Search Symbol'\r\n            id='search-bar'\r\n            className='mr-sm-2'\r\n            onChange={(e) => setSearchInput(e.target.value)}\r\n            ref={inputRef}\r\n          />\r\n        </Form>\r\n        {errorMsg ? (\r\n          <div className='text-danger'>{errorMsg.errorMessage}</div>\r\n        ) : null}\r\n        <ListGroup\r\n          id='results-watchlist'\r\n          className='option-container ml-0'\r\n          ref={ulRef}\r\n        >\r\n          {options.length > 0\r\n            ? options.map((option, index) => {\r\n                return (\r\n                  <ListGroup.Item\r\n                    key={index + 1000}\r\n                    className='ul-watchlist d-flex'\r\n                    action\r\n                    onClick={() => handleAdd(option.symbol)}\r\n                  >\r\n                    <div>{option.symbol}</div>\r\n                    <div className='ml-2'>-</div>\r\n                    <div className='ml-2'>{option.name}</div>\r\n                  </ListGroup.Item>\r\n                );\r\n              })\r\n            : null}\r\n        </ListGroup>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddWatchlist;\r\n","C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\stock-page\\ControlledTabs.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\utils\\function.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\utils\\Hooks\\UseQuery.js",[],"C:\\Users\\naamp\\source\\repos\\naamnamm\\stock-app\\stock-app\\client\\src\\components\\stock-page\\Transaction.js",["102","103","104","105","106","107","108","109"],"import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport { Form, Button, Col, Row, Card } from 'react-bootstrap';\r\nimport './Transaction.css';\r\nimport useQuery from '../../utils/Hooks/UseQuery';\r\nimport { AuthContext } from '../../context/AuthContext';\r\n\r\nfunction formatNum(num) {\r\n  return num.toLocaleString(undefined, { minimumFractionDigits: 2 });\r\n}\r\n\r\nconst Transaction = ({ type, currentPrice, setOrderMsg, orderMsg }) => {\r\n  const quantityRef = useRef();\r\n  const query = useQuery();\r\n  const [selectedStock, setSelectedStock] = useState(query.get('stock'));\r\n  const [currentBalance, setCurrentBalance] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n  const [total, setTotal] = useState('');\r\n  const [maxQuantity, setMaxQuantity] = useState('');\r\n  const [position, setPosition] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const getCashBalance = async () => {\r\n    try {\r\n      const userid = user.id;\r\n      const response = await fetch(`/api/cashBalance/${userid}`);\r\n      const data = await response.json();\r\n\r\n      setCurrentBalance(data.amount);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleOrderSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (quantity > maxQuantity || quantity <= 0) {\r\n      setOrderMsg({ errorMsg: 'Invalid quantity' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = {\r\n        symbol: selectedStock,\r\n        type,\r\n        quantity: quantityRef.current.value,\r\n        price: currentPrice,\r\n        userid: user.id,\r\n      };\r\n\r\n      const config = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      setLoading(true);\r\n      const response = await fetch('/api/transactions', config);\r\n      const orderData = await response.json();\r\n\r\n      if (!response.ok) {\r\n        setOrderMsg(orderData);\r\n      } else {\r\n        setOrderMsg(orderData);\r\n        setQuantity('');\r\n        await getCashBalance();\r\n        await getPosition();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const getMaxQuantity = () => {\r\n    if (type === 'buy') {\r\n      if (!(currentBalance && currentPrice)) {\r\n        return;\r\n      }\r\n      const maxQuantityToBuy = currentBalance / currentPrice;\r\n\r\n      setMaxQuantity(maxQuantityToBuy);\r\n    }\r\n\r\n    if (type === 'sell') {\r\n      const maxQuantityToSell = position ? position : null;\r\n\r\n      setMaxQuantity(maxQuantityToSell);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!currentPrice) return;\r\n\r\n    getMaxQuantity();\r\n  }, [currentPrice]);\r\n\r\n  useEffect(() => {\r\n    getMaxQuantity();\r\n  }, [currentBalance]);\r\n\r\n  const getPosition = async () => {\r\n    const userid = user.id;\r\n\r\n    const response = await fetch(\r\n      `/api/currentHoldings/${userid}/${selectedStock}`\r\n    );\r\n    const data = await response.json();\r\n\r\n    setPosition(data.quantity);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMaxQuantity();\r\n    getPosition();\r\n    getCashBalance();\r\n  }, [type]);\r\n\r\n  useEffect(() => {\r\n    const selectedStock = query.get('stock');\r\n\r\n    setSelectedStock(selectedStock);\r\n  }, [query.get('stock')]);\r\n\r\n  useEffect(() => {\r\n    if (!selectedStock) return;\r\n\r\n    getPosition();\r\n  }, [selectedStock]);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    getCashBalance();\r\n    getPosition();\r\n  }, [user]);\r\n\r\n  function handleQuantityChange(e) {\r\n    const newQuantity = e.target.value;\r\n    const totalTransactionValue = newQuantity * currentPrice;\r\n\r\n    setQuantity(newQuantity);\r\n    setTotal(totalTransactionValue);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const totalTransactionValue = quantity * currentPrice;\r\n    setTotal(totalTransactionValue);\r\n\r\n    if (orderMsg.errorMsg) {\r\n      setOrderMsg('');\r\n    }\r\n  }, [quantity]);\r\n\r\n  return (\r\n    <div>\r\n      {position ? <Card>Position: {position} stocks</Card> : null}\r\n      <Form className='my-2' onSubmit={handleOrderSubmit}>\r\n        <Form.Group\r\n          as={Row}\r\n          className='row-buy-sell px-3 py-2'\r\n          controlId='formHorizontalAmount'\r\n        >\r\n          <Form.Label column sm={4} className='px-0'>\r\n            Quantity\r\n          </Form.Label>\r\n\r\n          <Col sm={8} className='pl-3 pr-0'>\r\n            <Form.Control\r\n              type='number'\r\n              onChange={handleQuantityChange}\r\n              value={quantity}\r\n              placeholder='0.00'\r\n              ref={quantityRef}\r\n              required\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group\r\n          as={Row}\r\n          className='row-buy-sell px-3 py-2'\r\n          controlId='formHorizontalPrice'\r\n        >\r\n          <Form.Label column sm={4} className='px-0'>\r\n            Price\r\n          </Form.Label>\r\n\r\n          <Col sm={8} className='pl-3 pr-0'>\r\n            <Form.Control\r\n              type='number'\r\n              placeholder={currentPrice}\r\n              className='number-input'\r\n              readOnly\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Form.Group\r\n          as={Row}\r\n          className='row-buy-sell px-3 py-2'\r\n          controlId='formHorizontalPrice'\r\n        >\r\n          <Form.Label column sm={8} className='px-0'>\r\n            Max quantity to {type}\r\n          </Form.Label>\r\n\r\n          <Col sm={4} className='pl-3 pr-0'>\r\n            <Form.Control\r\n              plaintext\r\n              readOnly\r\n              defaultValue='0'\r\n              value={maxQuantity ? parseFloat(maxQuantity).toFixed(2) : '0'}\r\n              className='text-right'\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <hr className='total-line mx-auto my-1' />\r\n\r\n        <Form.Group\r\n          as={Row}\r\n          className='row-buy-sell px-3 py-2'\r\n          controlId='formHorizontalPrice'\r\n        >\r\n          <Form.Label column sm={6} className='px-0 font-weight-bold'>\r\n            Total\r\n          </Form.Label>\r\n\r\n          <Col sm={6} className='pl-3 pr-0'>\r\n            <Form.Control\r\n              plaintext\r\n              readOnly\r\n              defaultValue='0'\r\n              value={total ? formatNum(total) : '0'}\r\n              className='text-right font-weight-bold'\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Button\r\n          variant='success'\r\n          type='submit'\r\n          className='my-3'\r\n          disabled={loading}\r\n        >\r\n          {type} now\r\n        </Button>\r\n      </Form>\r\n\r\n      <hr />\r\n      <Form.Label className='label-alert mb-3'>\r\n        ${currentBalance} available to trade\r\n      </Form.Label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n",{"ruleId":"110","severity":1,"message":"111","line":1,"column":29,"nodeType":"112","messageId":"113","endLine":1,"endColumn":38},{"ruleId":"114","severity":1,"message":"115","line":213,"column":6,"nodeType":"116","endLine":213,"endColumn":12,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":217,"column":6,"nodeType":"116","endLine":217,"endColumn":43,"suggestions":"119"},{"ruleId":"114","severity":1,"message":"120","line":31,"column":6,"nodeType":"116","endLine":31,"endColumn":8,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":35,"column":23,"nodeType":"124","messageId":"125","endLine":35,"endColumn":25},{"ruleId":"114","severity":1,"message":"126","line":40,"column":6,"nodeType":"116","endLine":40,"endColumn":26,"suggestions":"127"},{"ruleId":"114","severity":1,"message":"128","line":40,"column":7,"nodeType":"129","endLine":40,"endColumn":25},{"ruleId":"110","severity":1,"message":"130","line":2,"column":21,"nodeType":"112","messageId":"113","endLine":2,"endColumn":24},{"ruleId":"131","severity":1,"message":"132","line":42,"column":13,"nodeType":"133","endLine":42,"endColumn":68},{"ruleId":"110","severity":1,"message":"134","line":15,"column":17,"nodeType":"112","messageId":"113","endLine":15,"endColumn":24},{"ruleId":"110","severity":1,"message":"135","line":15,"column":26,"nodeType":"112","messageId":"113","endLine":15,"endColumn":32},{"ruleId":"110","severity":1,"message":"136","line":15,"column":34,"nodeType":"112","messageId":"113","endLine":15,"endColumn":43},{"ruleId":"114","severity":1,"message":"137","line":63,"column":6,"nodeType":"116","endLine":63,"endColumn":12,"suggestions":"138"},{"ruleId":"114","severity":1,"message":"139","line":71,"column":6,"nodeType":"116","endLine":71,"endColumn":27,"suggestions":"140"},{"ruleId":"110","severity":1,"message":"141","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"114","severity":1,"message":"142","line":45,"column":6,"nodeType":"116","endLine":45,"endColumn":16,"suggestions":"143"},{"ruleId":"114","severity":1,"message":"144","line":68,"column":6,"nodeType":"116","endLine":68,"endColumn":19,"suggestions":"145"},{"ruleId":"114","severity":1,"message":"144","line":65,"column":6,"nodeType":"116","endLine":65,"endColumn":19,"suggestions":"146"},{"ruleId":"114","severity":1,"message":"147","line":100,"column":6,"nodeType":"116","endLine":100,"endColumn":20,"suggestions":"148"},{"ruleId":"114","severity":1,"message":"147","line":104,"column":6,"nodeType":"116","endLine":104,"endColumn":22,"suggestions":"149"},{"ruleId":"114","severity":1,"message":"150","line":121,"column":6,"nodeType":"116","endLine":121,"endColumn":12,"suggestions":"151"},{"ruleId":"114","severity":1,"message":"152","line":127,"column":6,"nodeType":"116","endLine":127,"endColumn":26,"suggestions":"153"},{"ruleId":"114","severity":1,"message":"128","line":127,"column":7,"nodeType":"129","endLine":127,"endColumn":25},{"ruleId":"114","severity":1,"message":"154","line":133,"column":6,"nodeType":"116","endLine":133,"endColumn":21,"suggestions":"155"},{"ruleId":"114","severity":1,"message":"156","line":139,"column":6,"nodeType":"116","endLine":139,"endColumn":12,"suggestions":"157"},{"ruleId":"114","severity":1,"message":"158","line":156,"column":6,"nodeType":"116","endLine":156,"endColumn":16,"suggestions":"159"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCashBalance', 'getCurrentHoldings', and 'getWatchlist'. Either include them or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has a missing dependency: 'getDoughnutChart'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'fetchStock'. Either include it or remove the dependency array.",["162"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fetchStock', 'query', and 'selectedStock'. Either include them or remove the dependency array.",["163"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'Nav' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'setUser' is assigned a value but never used.","'isAuth' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCashBalance' and 'getCashTransfer'. Either include them or remove the dependency array.",["164"],"React Hook useEffect has a missing dependency: 'getCashBalance'. Either include it or remove the dependency array.",["165"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'errorMsg'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has a missing dependency: 'stocks.stockList'. Either include it or remove the dependency array.",["167"],["168"],"React Hook useEffect has a missing dependency: 'getMaxQuantity'. Either include it or remove the dependency array.",["169"],["170"],"React Hook useEffect has missing dependencies: 'getCashBalance', 'getMaxQuantity', and 'getPosition'. Either include them or remove the dependency array.",["171"],"React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'getPosition'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'getCashBalance' and 'getPosition'. Either include them or remove the dependency array.",["174"],"React Hook useEffect has missing dependencies: 'currentPrice', 'orderMsg.errorMsg', and 'setOrderMsg'. Either include them or remove the dependency array. If 'setOrderMsg' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["175"],{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"190","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [getCashBalance, getCurrentHoldings, getWatchlist, user]",{"range":"207","text":"208"},"Update the dependencies array to be: [currentCashBalance, currentHoldings, getDoughnutChart]",{"range":"209","text":"210"},"Update the dependencies array to be: [fetchStock]",{"range":"211","text":"212"},"Update the dependencies array to be: [fetchStock, query, selectedStock]",{"range":"213","text":"214"},"Update the dependencies array to be: [getCashBalance, getCashTransfer, user]",{"range":"215","text":"216"},"Update the dependencies array to be: [cashTransferHistory, getCashBalance]",{"range":"217","text":"218"},"Update the dependencies array to be: [errorMsg, username]",{"range":"219","text":"220"},"Update the dependencies array to be: [searchInput, stocks.stockList]",{"range":"221","text":"222"},{"range":"223","text":"222"},"Update the dependencies array to be: [currentPrice, getMaxQuantity]",{"range":"224","text":"225"},"Update the dependencies array to be: [currentBalance, getMaxQuantity]",{"range":"226","text":"227"},"Update the dependencies array to be: [getCashBalance, getMaxQuantity, getPosition, type]",{"range":"228","text":"229"},"Update the dependencies array to be: [query]",{"range":"230","text":"231"},"Update the dependencies array to be: [getPosition, selectedStock]",{"range":"232","text":"233"},"Update the dependencies array to be: [getCashBalance, getPosition, user]",{"range":"234","text":"235"},"Update the dependencies array to be: [currentPrice, orderMsg.errorMsg, quantity, setOrderMsg]",{"range":"236","text":"237"},[6530,6536],"[getCashBalance, getCurrentHoldings, getWatchlist, user]",[6593,6630],"[currentCashBalance, currentHoldings, getDoughnutChart]",[1073,1075],"[fetchStock]",[1261,1281],"[fetchStock, query, selectedStock]",[1830,1836],"[getCashBalance, getCashTransfer, user]",[1948,1969],"[cashTransferHistory, getCashBalance]",[1247,1257],"[errorMsg, username]",[1787,1800],"[searchInput, stocks.stockList]",[1767,1780],[2737,2751],"[currentPrice, getMaxQuantity]",[2806,2822],"[currentBalance, getMaxQuantity]",[3172,3178],"[getCashBalance, getMaxQuantity, getPosition, type]",[3297,3317],"[query]",[3404,3419],"[getPosition, selectedStock]",[3518,3524],"[getCashBalance, getPosition, user]",[3937,3947],"[currentPrice, orderMsg.errorMsg, quantity, setOrderMsg]"]